# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.

import _font
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


MeasureTrailingSpaces = _font.MeasureTrailingSpaces
Default = _font.Default


def GetFontImageSize(*args):
  """
    GetFontImageSize(WCHAR fontname, float size, float maxWidth, WCHAR szText, 
        FontHint hint=Default) -> PyObject
    GetFontImageSize(WCHAR fontname, float size, float maxWidth, WCHAR szText) -> PyObject
    """
  return _font.GetFontImageSize(*args)

def CreateFontImage(*args):
  """
    CreateFontImage(WCHAR fontname, float size, float maxWidth, int a, 
        int r, int g, int b, WCHAR szwText, FontHint hint=Default) -> PyObject
    CreateFontImage(WCHAR fontname, float size, float maxWidth, int a, 
        int r, int g, int b, WCHAR szwText) -> PyObject
    """
  return _font.CreateFontImage(*args)

def CreateFontImageML(*args):
  """
    CreateFontImageML(WCHAR fontname, float size, float rWidth, float rHeight, 
        int align, int a, int r, int g, int b, 
        WCHAR szwText, FontHint hint=Default) -> PyObject
    CreateFontImageML(WCHAR fontname, float size, float rWidth, float rHeight, 
        int align, int a, int r, int g, int b, 
        WCHAR szwText) -> PyObject
    """
  return _font.CreateFontImageML(*args)

def CalculateTextSize(*args):
  """
    CalculateTextSize(WCHAR text, WCHAR fontname, float fontSize, FontHint hint=Default) -> float
    CalculateTextSize(WCHAR text, WCHAR fontname, float fontSize) -> float
    """
  return _font.CalculateTextSize(*args)

def CalculateCharPosition(*args):
  """
    CalculateCharPosition(WCHAR text, WCHAR fontname, float fontSize, int charOffset, 
        FontHint hint=Default) -> PyObject
    CalculateCharPosition(WCHAR text, WCHAR fontname, float fontSize, int charOffset) -> PyObject
    """
  return _font.CalculateCharPosition(*args)

