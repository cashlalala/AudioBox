# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.

import _rdgdi
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class ARGB(object):
    """Proxy of C++ ARGB class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    b = _swig_property(_rdgdi.ARGB_b_get, _rdgdi.ARGB_b_set)
    g = _swig_property(_rdgdi.ARGB_g_get, _rdgdi.ARGB_g_set)
    r = _swig_property(_rdgdi.ARGB_r_get, _rdgdi.ARGB_r_set)
    a = _swig_property(_rdgdi.ARGB_a_get, _rdgdi.ARGB_a_set)
    def __init__(self, *args): 
        """
        __init__(self, int a=255, int r=255, int g=255, int b=255) -> ARGB
        __init__(self, int a=255, int r=255, int g=255) -> ARGB
        __init__(self, int a=255, int r=255) -> ARGB
        __init__(self, int a=255) -> ARGB
        __init__(self) -> ARGB
        """
        this = _rdgdi.new_ARGB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rdgdi.delete_ARGB
    __del__ = lambda self : None;
ARGB_swigregister = _rdgdi.ARGB_swigregister
ARGB_swigregister(ARGB)

class DRAWBOUND(object):
    """Proxy of C++ DRAWBOUND class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    left = _swig_property(_rdgdi.DRAWBOUND_left_get, _rdgdi.DRAWBOUND_left_set)
    top = _swig_property(_rdgdi.DRAWBOUND_top_get, _rdgdi.DRAWBOUND_top_set)
    right = _swig_property(_rdgdi.DRAWBOUND_right_get, _rdgdi.DRAWBOUND_right_set)
    bottom = _swig_property(_rdgdi.DRAWBOUND_bottom_get, _rdgdi.DRAWBOUND_bottom_set)
    region_top = _swig_property(_rdgdi.DRAWBOUND_region_top_get, _rdgdi.DRAWBOUND_region_top_set)
    region_right = _swig_property(_rdgdi.DRAWBOUND_region_right_get, _rdgdi.DRAWBOUND_region_right_set)
    region_left = _swig_property(_rdgdi.DRAWBOUND_region_left_get, _rdgdi.DRAWBOUND_region_left_set)
    region_bottom = _swig_property(_rdgdi.DRAWBOUND_region_bottom_get, _rdgdi.DRAWBOUND_region_bottom_set)
    def __init__(self, *args): 
        """__init__(self) -> DRAWBOUND"""
        this = _rdgdi.new_DRAWBOUND(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rdgdi.delete_DRAWBOUND
    __del__ = lambda self : None;
DRAWBOUND_swigregister = _rdgdi.DRAWBOUND_swigregister
DRAWBOUND_swigregister(DRAWBOUND)

class CTexture(object):
    """Proxy of C++ CTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CTexture"""
        this = _rdgdi.new_CTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rdgdi.delete_CTexture
    __del__ = lambda self : None;
    def GetSize(*args):
        """GetSize(self) -> PyObject"""
        return _rdgdi.CTexture_GetSize(*args)

    def Apply(*args):
        """Apply(self)"""
        return _rdgdi.CTexture_Apply(*args)

    def SetName(*args):
        """SetName(self, WCHAR name)"""
        return _rdgdi.CTexture_SetName(*args)

CTexture_swigregister = _rdgdi.CTexture_swigregister
CTexture_swigregister(CTexture)

class CStaticTexture(CTexture):
    """Proxy of C++ CStaticTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CStaticTexture"""
        this = _rdgdi.new_CStaticTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rdgdi.delete_CStaticTexture
    __del__ = lambda self : None;
CStaticTexture_swigregister = _rdgdi.CStaticTexture_swigregister
CStaticTexture_swigregister(CStaticTexture)

class CBufferTexture(CStaticTexture):
    """Proxy of C++ CBufferTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CBufferTexture"""
        this = _rdgdi.new_CBufferTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rdgdi.delete_CBufferTexture
    __del__ = lambda self : None;
    def SetRaw(*args):
        """SetRaw(self, char buffer, int w, int h, char mode) -> int"""
        return _rdgdi.CBufferTexture_SetRaw(*args)

    def GetWidth(*args):
        """GetWidth(self) -> int"""
        return _rdgdi.CBufferTexture_GetWidth(*args)

    def GetHeight(*args):
        """GetHeight(self) -> int"""
        return _rdgdi.CBufferTexture_GetHeight(*args)

    def SetDrawHint(*args):
        """SetDrawHint(self, int w, int h, DWORD t)"""
        return _rdgdi.CBufferTexture_SetDrawHint(*args)

    def Create(*args):
        """Create(self, int w, int h) -> int"""
        return _rdgdi.CBufferTexture_Create(*args)

    def CreateFromRaw(*args):
        """CreateFromRaw(self, char buffer, int w, int h, char mode) -> int"""
        return _rdgdi.CBufferTexture_CreateFromRaw(*args)

    def CreateFromBitmap(*args):
        """CreateFromBitmap(self, Gdiplus::Bitmap bitmap) -> int"""
        return _rdgdi.CBufferTexture_CreateFromBitmap(*args)

    def CreateFromBitmapStream(*args):
        """CreateFromBitmapStream(self, char buffer) -> int"""
        return _rdgdi.CBufferTexture_CreateFromBitmapStream(*args)

CBufferTexture_swigregister = _rdgdi.CBufferTexture_swigregister
CBufferTexture_swigregister(CBufferTexture)

class CDynamicTexture(CStaticTexture):
    """Proxy of C++ CDynamicTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CDynamicTexture"""
        this = _rdgdi.new_CDynamicTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rdgdi.delete_CDynamicTexture
    __del__ = lambda self : None;
    def Create(*args):
        """Create(self, int w, int h) -> int"""
        return _rdgdi.CDynamicTexture_Create(*args)

    def SetRaw(*args):
        """SetRaw(self, char buffer, int w, int h, char mode) -> bool"""
        return _rdgdi.CDynamicTexture_SetRaw(*args)

CDynamicTexture_swigregister = _rdgdi.CDynamicTexture_swigregister
CDynamicTexture_swigregister(CDynamicTexture)

class CFileTexture(CBufferTexture):
    """Proxy of C++ CFileTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CFileTexture"""
        this = _rdgdi.new_CFileTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    def Create(*args):
        """Create(self, WCHAR filename, int nMaxWidth, int nMaxHeight) -> bool"""
        return _rdgdi.CFileTexture_Create(*args)

    __swig_destroy__ = _rdgdi.delete_CFileTexture
    __del__ = lambda self : None;
CFileTexture_swigregister = _rdgdi.CFileTexture_swigregister
CFileTexture_swigregister(CFileTexture)

class CFontTexture(CBufferTexture):
    """Proxy of C++ CFontTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CFontTexture"""
        this = _rdgdi.new_CFontTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    def Create(*args):
        """
        Create(self, WCHAR font, float size, float maxWidth, int a, int r, 
            int g, int b, WCHAR szwText, DWORD hint) -> PyObject
        """
        return _rdgdi.CFontTexture_Create(*args)

    def CreateML(*args):
        """
        CreateML(self, WCHAR font, float size, float rWidth, float rHeight, 
            int align, int a, int r, int g, int b, WCHAR szwText) -> PyObject
        """
        return _rdgdi.CFontTexture_CreateML(*args)

    __swig_destroy__ = _rdgdi.delete_CFontTexture
    __del__ = lambda self : None;
CFontTexture_swigregister = _rdgdi.CFontTexture_swigregister
CFontTexture_swigregister(CFontTexture)

class CAnimatedTexture(CTexture):
    """Proxy of C++ CAnimatedTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, CRender ?, int count, float t, LPIInterpolator itp, 
            bool loop=True) -> CAnimatedTexture
        __init__(self, CRender ?, int count, float t, LPIInterpolator itp) -> CAnimatedTexture
        """
        this = _rdgdi.new_CAnimatedTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rdgdi.delete_CAnimatedTexture
    __del__ = lambda self : None;
    def Create(*args):
        """Create(self, int idx, WCHAR filename, int nMaxWidth, int nMaxHeight) -> bool"""
        return _rdgdi.CAnimatedTexture_Create(*args)

    def GetSize(*args):
        """GetSize(self) -> PyObject"""
        return _rdgdi.CAnimatedTexture_GetSize(*args)

    def GetInterpolator(*args):
        """GetInterpolator(self) -> LPIInterpolator"""
        return _rdgdi.CAnimatedTexture_GetInterpolator(*args)

CAnimatedTexture_swigregister = _rdgdi.CAnimatedTexture_swigregister
CAnimatedTexture_swigregister(CAnimatedTexture)

class CRender(object):
    """Proxy of C++ CRender class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Create(*args):
        """
        Create(self, HWND hwnd, bool isKoanBox=False) -> bool
        Create(self, HWND hwnd) -> bool
        """
        return _rdgdi.CRender_Create(*args)

    def Close(*args):
        """Close(self)"""
        return _rdgdi.CRender_Close(*args)

    def ToggleFullScreen(*args):
        """ToggleFullScreen(self, bool v)"""
        return _rdgdi.CRender_ToggleFullScreen(*args)

    def Is3D(*args):
        """Is3D(self) -> bool"""
        return _rdgdi.CRender_Is3D(*args)

    def GetRenderName(*args):
        """GetRenderName(self) -> char"""
        return _rdgdi.CRender_GetRenderName(*args)

    def GetWnd(*args):
        """GetWnd(self) -> HWND"""
        return _rdgdi.CRender_GetWnd(*args)

    def SetTexture(*args):
        """SetTexture(self, CTexture texture)"""
        return _rdgdi.CRender_SetTexture(*args)

    def PushAlpha(*args):
        """PushAlpha(self, float a)"""
        return _rdgdi.CRender_PushAlpha(*args)

    def PopAlpha(*args):
        """PopAlpha(self)"""
        return _rdgdi.CRender_PopAlpha(*args)

    def PushBound(*args):
        """
        PushBound(self, float left, float top, float right, float bottom, float region_left, 
            float region_top, float region_right, 
            float region_bottom)
        """
        return _rdgdi.CRender_PushBound(*args)

    def PopBound(*args):
        """PopBound(self)"""
        return _rdgdi.CRender_PopBound(*args)

    def IdentityWorld(*args):
        """IdentityWorld(self)"""
        return _rdgdi.CRender_IdentityWorld(*args)

    def PushMatrix(*args):
        """PushMatrix(self)"""
        return _rdgdi.CRender_PushMatrix(*args)

    def PopMatrix(*args):
        """PopMatrix(self)"""
        return _rdgdi.CRender_PopMatrix(*args)

    def Translate(*args):
        """Translate(self, float x, float y)"""
        return _rdgdi.CRender_Translate(*args)

    def Rotate(*args):
        """Rotate(self, float a)"""
        return _rdgdi.CRender_Rotate(*args)

    def Scale(*args):
        """Scale(self, float x, float y)"""
        return _rdgdi.CRender_Scale(*args)

    def SetColor(*args):
        """SetColor(self, float a, float r, float g, float b)"""
        return _rdgdi.CRender_SetColor(*args)

    def BeginRender(*args):
        """BeginRender(self, HDC dc)"""
        return _rdgdi.CRender_BeginRender(*args)

    def EndRender(*args):
        """EndRender(self)"""
        return _rdgdi.CRender_EndRender(*args)

    def BeginWait(*args):
        """BeginWait(self)"""
        return _rdgdi.CRender_BeginWait(*args)

    def EndWait(*args):
        """EndWait(self)"""
        return _rdgdi.CRender_EndWait(*args)

    def Clear(*args):
        """Clear(self)"""
        return _rdgdi.CRender_Clear(*args)

    def DrawRect(*args):
        """DrawRect(self, float left, float top, float right, float bottom)"""
        return _rdgdi.CRender_DrawRect(*args)

    def DrawRectPie(*args):
        """DrawRectPie(self, float l, float t, float r, float b, float start, float end)"""
        return _rdgdi.CRender_DrawRectPie(*args)

    def DrawQuad(*args):
        """
        DrawQuad(self, float x0, float y0, float x1, float y1, float x2, float y2, 
            float x3, float y3)
        """
        return _rdgdi.CRender_DrawQuad(*args)

    def NotifyMove(*args):
        """NotifyMove(self)"""
        return _rdgdi.CRender_NotifyMove(*args)

    def GetFreeMemory(*args):
        """GetFreeMemory(self) -> DWORD"""
        return _rdgdi.CRender_GetFreeMemory(*args)

    def SetAnim(*args):
        """SetAnim(self, LPIInterpolator anim, int pos)"""
        return _rdgdi.CRender_SetAnim(*args)

    def GetRenderTime(*args):
        """GetRenderTime(self) -> double"""
        return _rdgdi.CRender_GetRenderTime(*args)

    def Pause(*args):
        """Pause(self, bool v)"""
        return _rdgdi.CRender_Pause(*args)

    def Restore(*args):
        """Restore(self) -> bool"""
        return _rdgdi.CRender_Restore(*args)

    def PauseDevice(*args):
        """PauseDevice(self, bool v) -> bool"""
        return _rdgdi.CRender_PauseDevice(*args)

    def DirtyRect(*args):
        """DirtyRect(self, float x1, float y1, float x2, float y2)"""
        return _rdgdi.CRender_DirtyRect(*args)

    def PushDirty(*args):
        """PushDirty(self, float left, float top, float width, float height, bool init)"""
        return _rdgdi.CRender_PushDirty(*args)

    def PopDirty(*args):
        """PopDirty(self)"""
        return _rdgdi.CRender_PopDirty(*args)

    def SetHint(*args):
        """SetHint(self, char option, int value) -> bool"""
        return _rdgdi.CRender_SetHint(*args)

    def GetHint(*args):
        """GetHint(self, char option) -> PyObject"""
        return _rdgdi.CRender_GetHint(*args)

    def SetIsMoving(*args):
        """SetIsMoving(self, bool isMoving)"""
        return _rdgdi.CRender_SetIsMoving(*args)

    def OnSize(*args):
        """OnSize(self, int w, int h)"""
        return _rdgdi.CRender_OnSize(*args)

    def RegisterKoanBox(*args):
        """RegisterKoanBox(self, int hwnd) -> int"""
        return _rdgdi.CRender_RegisterKoanBox(*args)

    def UnRegisterKoanBox(*args):
        """UnRegisterKoanBox(self) -> int"""
        return _rdgdi.CRender_UnRegisterKoanBox(*args)

    def __init__(self, *args): 
        """__init__(self) -> CRender"""
        this = _rdgdi.new_CRender(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rdgdi.delete_CRender
    __del__ = lambda self : None;
CRender_swigregister = _rdgdi.CRender_swigregister
CRender_swigregister(CRender)



