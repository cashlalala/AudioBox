# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.

import _render3d
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class IHWResource(object):
    """Proxy of C++ IHWResource class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> IHWResource"""
        this = _render3d.new_IHWResource(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _render3d.delete_IHWResource
    __del__ = lambda self : None;
    def AddRef(*args):
        """AddRef(self) -> unsigned long"""
        return _render3d.IHWResource_AddRef(*args)

    def Release(*args):
        """Release(self) -> unsigned long"""
        return _render3d.IHWResource_Release(*args)

    def GetPaintNumber(*args):
        """GetPaintNumber(self) -> int"""
        return _render3d.IHWResource_GetPaintNumber(*args)

    def SetPaintNumber(*args):
        """SetPaintNumber(self, int n)"""
        return _render3d.IHWResource_SetPaintNumber(*args)

IHWResource_swigregister = _render3d.IHWResource_swigregister
IHWResource_swigregister(IHWResource)

TEX_FILTER_AUTO = _render3d.TEX_FILTER_AUTO
TEX_FILTER_LINEAR = _render3d.TEX_FILTER_LINEAR
TEX_FILTER_POINT = _render3d.TEX_FILTER_POINT
TEX_FMT_ARGB = _render3d.TEX_FMT_ARGB
TEX_FMT_XRGB = _render3d.TEX_FMT_XRGB
class CTexture(IHWResource):
    """Proxy of C++ CTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CTexture"""
        this = _render3d.new_CTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _render3d.delete_CTexture
    __del__ = lambda self : None;
    def GetSize(*args):
        """GetSize(self) -> PyObject"""
        return _render3d.CTexture_GetSize(*args)

    def SetName(*args):
        """SetName(self, WCHAR name)"""
        return _render3d.CTexture_SetName(*args)

    def GetName(*args):
        """GetName(self) -> wchar_t"""
        return _render3d.CTexture_GetName(*args)

    def SetMargin(*args):
        """SetMargin(self, float l, float t, float r, float b)"""
        return _render3d.CTexture_SetMargin(*args)

    def SetHollow(*args):
        """SetHollow(self, bool ?)"""
        return _render3d.CTexture_SetHollow(*args)

    def SetFilter(*args):
        """SetFilter(self, TexFilter ?)"""
        return _render3d.CTexture_SetFilter(*args)

CTexture_swigregister = _render3d.CTexture_swigregister
CTexture_swigregister(CTexture)

class CStaticTexture(CTexture):
    """Proxy of C++ CStaticTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CStaticTexture"""
        this = _render3d.new_CStaticTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _render3d.delete_CStaticTexture
    __del__ = lambda self : None;
CStaticTexture_swigregister = _render3d.CStaticTexture_swigregister
CStaticTexture_swigregister(CStaticTexture)

class CBufferTexture(CStaticTexture):
    """Proxy of C++ CBufferTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CBufferTexture"""
        this = _render3d.new_CBufferTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _render3d.delete_CBufferTexture
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create(self, unsigned int w, unsigned int h, TexFormat format=TEX_FMT_ARGB) -> int
        Create(self, unsigned int w, unsigned int h) -> int
        """
        return _render3d.CBufferTexture_Create(*args)

    def CreateFromRaw(*args):
        """
        CreateFromRaw(self, char buffer, unsigned int w, unsigned int h, char mode, 
            bool cache=False) -> int
        CreateFromRaw(self, char buffer, unsigned int w, unsigned int h, char mode) -> int
        """
        return _render3d.CBufferTexture_CreateFromRaw(*args)

    def CreateFromBitmap(*args):
        """CreateFromBitmap(self, Gdiplus::Bitmap bitmap) -> int"""
        return _render3d.CBufferTexture_CreateFromBitmap(*args)

    def CreateFromFileStream(*args):
        """CreateFromFileStream(self, char buffer) -> int"""
        return _render3d.CBufferTexture_CreateFromFileStream(*args)

CBufferTexture_swigregister = _render3d.CBufferTexture_swigregister
CBufferTexture_swigregister(CBufferTexture)

class CDynamicTexture(CBufferTexture):
    """Proxy of C++ CDynamicTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CDynamicTexture"""
        this = _render3d.new_CDynamicTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    def Create(*args):
        """
        Create(self, unsigned int w, unsigned int h, TexFormat format=TEX_FMT_XRGB) -> int
        Create(self, unsigned int w, unsigned int h) -> int
        """
        return _render3d.CDynamicTexture_Create(*args)

    __swig_destroy__ = _render3d.delete_CDynamicTexture
    __del__ = lambda self : None;
CDynamicTexture_swigregister = _render3d.CDynamicTexture_swigregister
CDynamicTexture_swigregister(CDynamicTexture)

class CInterpolatorTexture(CTexture):
    """Proxy of C++ CInterpolatorTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _render3d.delete_CInterpolatorTexture
    __del__ = lambda self : None;
CInterpolatorTexture_swigregister = _render3d.CInterpolatorTexture_swigregister
CInterpolatorTexture_swigregister(CInterpolatorTexture)

class CMovieTexture(CInterpolatorTexture):
    """Proxy of C++ CMovieTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?, IAllocator pAllocator) -> CMovieTexture"""
        this = _render3d.new_CMovieTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _render3d.delete_CMovieTexture
    __del__ = lambda self : None;
    def SetMajor(*args):
        """SetMajor(self, bool v)"""
        return _render3d.CMovieTexture_SetMajor(*args)

    def Draw(*args):
        """Draw(self, int l, int t, int r, int b)"""
        return _render3d.CMovieTexture_Draw(*args)

    def GetSize(*args):
        """GetSize(self) -> PyObject"""
        return _render3d.CMovieTexture_GetSize(*args)

    def GetRatio(*args):
        """GetRatio(self) -> float"""
        return _render3d.CMovieTexture_GetRatio(*args)

CMovieTexture_swigregister = _render3d.CMovieTexture_swigregister
CMovieTexture_swigregister(CMovieTexture)

class CRenderTexture(CStaticTexture):
    """Proxy of C++ CRenderTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CRenderTexture"""
        this = _render3d.new_CRenderTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _render3d.delete_CRenderTexture
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create(self, unsigned int w, unsigned int h, TexFormat format=TEX_FMT_ARGB) -> bool
        Create(self, unsigned int w, unsigned int h) -> bool
        """
        return _render3d.CRenderTexture_Create(*args)

CRenderTexture_swigregister = _render3d.CRenderTexture_swigregister
CRenderTexture_swigregister(CRenderTexture)

class CFileTexture(CBufferTexture):
    """Proxy of C++ CFileTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CFileTexture"""
        this = _render3d.new_CFileTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _render3d.delete_CFileTexture
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create(self, WCHAR filename, int nMaxWidth, int nMaxHeight, PyObject gamma=None, 
            bool bAsync=False) -> bool
        Create(self, WCHAR filename, int nMaxWidth, int nMaxHeight, PyObject gamma=None) -> bool
        Create(self, WCHAR filename, int nMaxWidth, int nMaxHeight) -> bool
        """
        return _render3d.CFileTexture_Create(*args)

    def IsLoaded(*args):
        """IsLoaded(self) -> bool"""
        return _render3d.CFileTexture_IsLoaded(*args)

CFileTexture_swigregister = _render3d.CFileTexture_swigregister
CFileTexture_swigregister(CFileTexture)

class CFontTexture(CBufferTexture):
    """Proxy of C++ CFontTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CFontTexture"""
        this = _render3d.new_CFontTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _render3d.delete_CFontTexture
    __del__ = lambda self : None;
    def Create(*args):
        """
        Create(self, WCHAR font, float size, float maxWidth, int a, int r, 
            int g, int b, WCHAR szwText, DWORD hint) -> PyObject
        """
        return _render3d.CFontTexture_Create(*args)

    def CreateML(*args):
        """
        CreateML(self, WCHAR font, float size, float rWidth, float rHeight, 
            int align, int a, int r, int g, int b, WCHAR szwText) -> PyObject
        """
        return _render3d.CFontTexture_CreateML(*args)

CFontTexture_swigregister = _render3d.CFontTexture_swigregister
CFontTexture_swigregister(CFontTexture)

class CAnimatedTexture(CInterpolatorTexture):
    """Proxy of C++ CAnimatedTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, CRender ?, int count, float t, LPIInterpolator itp, 
            bool loop=True) -> CAnimatedTexture
        __init__(self, CRender ?, int count, float t, LPIInterpolator itp) -> CAnimatedTexture
        """
        this = _render3d.new_CAnimatedTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _render3d.delete_CAnimatedTexture
    __del__ = lambda self : None;
    def Create(*args):
        """Create(self, unsigned int idx, WCHAR filename, int nMaxWidth, int nMaxHeight) -> bool"""
        return _render3d.CAnimatedTexture_Create(*args)

    def GetSize(*args):
        """GetSize(self) -> PyObject"""
        return _render3d.CAnimatedTexture_GetSize(*args)

CAnimatedTexture_swigregister = _render3d.CAnimatedTexture_swigregister
CAnimatedTexture_swigregister(CAnimatedTexture)

class CDynTexture(CStaticTexture):
    """Proxy of C++ CDynTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CDynTexture"""
        this = _render3d.new_CDynTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _render3d.delete_CDynTexture
    __del__ = lambda self : None;
    def Create(*args):
        """Create(self, unsigned int w, unsigned int h, char mode) -> int"""
        return _render3d.CDynTexture_Create(*args)

    def Update(*args):
        """
        Update(self, IImageBuffer pImageBuffer, bool now=True)
        Update(self, IImageBuffer pImageBuffer)
        """
        return _render3d.CDynTexture_Update(*args)

    def UpdateNow(*args):
        """UpdateNow(self) -> bool"""
        return _render3d.CDynTexture_UpdateNow(*args)

CDynTexture_swigregister = _render3d.CDynTexture_swigregister
CDynTexture_swigregister(CDynTexture)


def DumpCurrentTexture(*args):
  """DumpCurrentTexture()"""
  return _render3d.DumpCurrentTexture(*args)
class CPackedDynamicTexture(CDynamicTexture):
    """Proxy of C++ CPackedDynamicTexture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CPackedDynamicTexture"""
        this = _render3d.new_CPackedDynamicTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    def RestoreResource(*args):
        """RestoreResource(self)"""
        return _render3d.CPackedDynamicTexture_RestoreResource(*args)

    def RestorePackedData(*args):
        """RestorePackedData(self)"""
        return _render3d.CPackedDynamicTexture_RestorePackedData(*args)

    __swig_destroy__ = _render3d.delete_CPackedDynamicTexture
    __del__ = lambda self : None;
CPackedDynamicTexture_swigregister = _render3d.CPackedDynamicTexture_swigregister
CPackedDynamicTexture_swigregister(CPackedDynamicTexture)

class CAutoPackTexture32(CStaticTexture):
    """Proxy of C++ CAutoPackTexture32 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CAutoPackTexture32"""
        this = _render3d.new_CAutoPackTexture32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _render3d.delete_CAutoPackTexture32
    __del__ = lambda self : None;
    def UploadData(*args):
        """UploadData(self, char buffer, unsigned int w, unsigned int h) -> int"""
        return _render3d.CAutoPackTexture32_UploadData(*args)

CAutoPackTexture32_swigregister = _render3d.CAutoPackTexture32_swigregister
CAutoPackTexture32_swigregister(CAutoPackTexture32)

class CMesh(IHWResource):
    """Proxy of C++ CMesh class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> CMesh"""
        this = _render3d.new_CMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _render3d.delete_CMesh
    __del__ = lambda self : None;
    def Load(*args):
        """Load(self, WCHAR path, WCHAR name) -> bool"""
        return _render3d.CMesh_Load(*args)

CMesh_swigregister = _render3d.CMesh_swigregister
CMesh_swigregister(CMesh)

class CEffect(IHWResource):
    """Proxy of C++ CEffect class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CRender ?) -> CEffect"""
        this = _render3d.new_CEffect(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _render3d.delete_CEffect
    __del__ = lambda self : None;
    def GetPass(*args):
        """GetPass(self) -> UINT"""
        return _render3d.CEffect_GetPass(*args)

    def Create(*args):
        """Create(self, char strEffect, int len) -> bool"""
        return _render3d.CEffect_Create(*args)

    def CreateFromFile(*args):
        """CreateFromFile(self, WCHAR fn) -> bool"""
        return _render3d.CEffect_CreateFromFile(*args)

    def SetFloat(*args):
        """SetFloat(self, char name, float ?)"""
        return _render3d.CEffect_SetFloat(*args)

    def SetVector(*args):
        """SetVector(self, char name, float ?, float ?, float ?, float ?)"""
        return _render3d.CEffect_SetVector(*args)

CEffect_swigregister = _render3d.CEffect_swigregister
CEffect_swigregister(CEffect)

GDI_RENDER = _render3d.GDI_RENDER
GDIPLUS_RENDER = _render3d.GDIPLUS_RENDER
DX7_RENDER = _render3d.DX7_RENDER
DX9_RENDER = _render3d.DX9_RENDER
class CRender(object):
    """Proxy of C++ CRender class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> CRender"""
        this = _render3d.new_CRender(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _render3d.delete_CRender
    __del__ = lambda self : None;
    def Is3D(*args):
        """Is3D(self) -> bool"""
        return _render3d.CRender_Is3D(*args)

    def GetD3D(*args):
        """GetD3D(self) -> void"""
        return _render3d.CRender_GetD3D(*args)

    def GetD3DDevice(*args):
        """GetD3DDevice(self) -> void"""
        return _render3d.CRender_GetD3DDevice(*args)

    def GetDDraw(*args):
        """GetDDraw(self) -> void"""
        return _render3d.CRender_GetDDraw(*args)

    def GetPrimarySurface(*args):
        """GetPrimarySurface(self) -> void"""
        return _render3d.CRender_GetPrimarySurface(*args)

    def GetRenderer(*args):
        """GetRenderer(self) -> void"""
        return _render3d.CRender_GetRenderer(*args)

    def GetRenderName(*args):
        """GetRenderName(self) -> char"""
        return _render3d.CRender_GetRenderName(*args)

    def GetWnd(*args):
        """GetWnd(self) -> HWND"""
        return _render3d.CRender_GetWnd(*args)

    def GetMonitor(*args):
        """GetMonitor(self) -> HMONITOR"""
        return _render3d.CRender_GetMonitor(*args)

    def Create(*args):
        """
        Create(self, HWND wnd, KClock time, RENDERTYPE type=DX9_RENDER, 
            bool bFullscreenBuffer=True, bool zBuffer=True, 
            bool bVsync=True, bool isKoanBox=False) -> bool
        Create(self, HWND wnd, KClock time, RENDERTYPE type=DX9_RENDER, 
            bool bFullscreenBuffer=True, bool zBuffer=True, 
            bool bVsync=True) -> bool
        Create(self, HWND wnd, KClock time, RENDERTYPE type=DX9_RENDER, 
            bool bFullscreenBuffer=True, bool zBuffer=True) -> bool
        Create(self, HWND wnd, KClock time, RENDERTYPE type=DX9_RENDER, 
            bool bFullscreenBuffer=True) -> bool
        Create(self, HWND wnd, KClock time, RENDERTYPE type=DX9_RENDER) -> bool
        Create(self, HWND wnd, KClock time) -> bool
        """
        return _render3d.CRender_Create(*args)

    def Close(*args):
        """Close(self)"""
        return _render3d.CRender_Close(*args)

    def ToggleFullScreen(*args):
        """ToggleFullScreen(self, bool v) -> bool"""
        return _render3d.CRender_ToggleFullScreen(*args)

    def NotifyMove(*args):
        """NotifyMove(self)"""
        return _render3d.CRender_NotifyMove(*args)

    def RefreshTextures(*args):
        """RefreshTextures(self)"""
        return _render3d.CRender_RefreshTextures(*args)

    def GetFreeMemory(*args):
        """GetFreeMemory(self) -> DWORD"""
        return _render3d.CRender_GetFreeMemory(*args)

    def SetAnim(*args):
        """SetAnim(self, LPIInterpolator anim, int pos)"""
        return _render3d.CRender_SetAnim(*args)

    def GetRenderTime(*args):
        """GetRenderTime(self) -> double"""
        return _render3d.CRender_GetRenderTime(*args)

    def Pause(*args):
        """Pause(self, bool v)"""
        return _render3d.CRender_Pause(*args)

    def FrameUpdate(*args):
        """FrameUpdate(self)"""
        return _render3d.CRender_FrameUpdate(*args)

    def Restore(*args):
        """Restore(self) -> bool"""
        return _render3d.CRender_Restore(*args)

    def PauseDevice(*args):
        """PauseDevice(self, bool v) -> bool"""
        return _render3d.CRender_PauseDevice(*args)

    def SetHint(*args):
        """
        SetHint(self, char option, int value=0) -> bool
        SetHint(self, char option) -> bool
        """
        return _render3d.CRender_SetHint(*args)

    def GetHint(*args):
        """GetHint(self, char option) -> PyObject"""
        return _render3d.CRender_GetHint(*args)

    def SetIsMoving(*args):
        """SetIsMoving(self, bool isMoving)"""
        return _render3d.CRender_SetIsMoving(*args)

    def GetPaintNumber(*args):
        """GetPaintNumber(self) -> int"""
        return _render3d.CRender_GetPaintNumber(*args)

    def BeginRender(*args):
        """BeginRender(self)"""
        return _render3d.CRender_BeginRender(*args)

    def EndRender(*args):
        """
        EndRender(self, bool activeAnim=True)
        EndRender(self)
        """
        return _render3d.CRender_EndRender(*args)

    def LockBackBuffer(*args):
        """LockBackBuffer(self, void buf, int stride, int w, int h)"""
        return _render3d.CRender_LockBackBuffer(*args)

    def UnlockBackBuffer(*args):
        """UnlockBackBuffer(self)"""
        return _render3d.CRender_UnlockBackBuffer(*args)

    def DirtyRect(*args):
        """DirtyRect(self, float x1, float y1, float x2, float y2)"""
        return _render3d.CRender_DirtyRect(*args)

    def Probe(*args):
        """
        Probe(self, int i=0)
        Probe(self)
        """
        return _render3d.CRender_Probe(*args)

    def PushDirty(*args):
        """
        PushDirty(self, PyObject left, PyObject top, PyObject width, PyObject height, 
            bool init) -> int
        """
        return _render3d.CRender_PushDirty(*args)

    def PopDirty(*args):
        """PopDirty(self)"""
        return _render3d.CRender_PopDirty(*args)

    def ReuseSight(*args):
        """ReuseSight(self, int sight) -> int"""
        return _render3d.CRender_ReuseSight(*args)

    def PushSight(*args):
        """
        PushSight(self, PyObject left, PyObject top, PyObject width, PyObject height, 
            bool init) -> int
        """
        return _render3d.CRender_PushSight(*args)

    def PopSight(*args):
        """PopSight(self)"""
        return _render3d.CRender_PopSight(*args)

    def SetTexture(*args):
        """SetTexture(self, CTexture texture)"""
        return _render3d.CRender_SetTexture(*args)

    def SetTextureEx(*args):
        """SetTextureEx(self, int id, CTexture texture)"""
        return _render3d.CRender_SetTextureEx(*args)

    def EndRenderToTexture(*args):
        """EndRenderToTexture(self)"""
        return _render3d.CRender_EndRenderToTexture(*args)

    def BeginRenderToTextureEx(*args):
        """
        BeginRenderToTextureEx(self, CRenderTexture pRt, bool once=True)
        BeginRenderToTextureEx(self, CRenderTexture pRt)
        """
        return _render3d.CRender_BeginRenderToTextureEx(*args)

    def EndRenderToTextureEx(*args):
        """EndRenderToTextureEx(self, CRenderTexture pRt)"""
        return _render3d.CRender_EndRenderToTextureEx(*args)

    def PushEffect(*args):
        """PushEffect(self, CEffect ?)"""
        return _render3d.CRender_PushEffect(*args)

    def PopEffect(*args):
        """PopEffect(self)"""
        return _render3d.CRender_PopEffect(*args)

    def SetEffectFloat(*args):
        """SetEffectFloat(self, CEffect pEffect, char name, PyObject v)"""
        return _render3d.CRender_SetEffectFloat(*args)

    def SetEffectVector(*args):
        """SetEffectVector(self, CEffect pEffect, char name, float v)"""
        return _render3d.CRender_SetEffectVector(*args)

    def SetEffectTechnique(*args):
        """SetEffectTechnique(self, CEffect pEffect, char name)"""
        return _render3d.CRender_SetEffectTechnique(*args)

    def PushAlpha(*args):
        """PushAlpha(self, PyObject a)"""
        return _render3d.CRender_PushAlpha(*args)

    def PopAlpha(*args):
        """PopAlpha(self)"""
        return _render3d.CRender_PopAlpha(*args)

    def PushBound(*args):
        """
        PushBound(self, PyObject left, PyObject top, PyObject right, PyObject bottom, 
            PyObject region_left=None, PyObject region_top=None, 
            PyObject region_right=None, 
            PyObject region_bottom=None)
        PushBound(self, PyObject left, PyObject top, PyObject right, PyObject bottom, 
            PyObject region_left=None, PyObject region_top=None, 
            PyObject region_right=None)
        PushBound(self, PyObject left, PyObject top, PyObject right, PyObject bottom, 
            PyObject region_left=None, PyObject region_top=None)
        PushBound(self, PyObject left, PyObject top, PyObject right, PyObject bottom, 
            PyObject region_left=None)
        PushBound(self, PyObject left, PyObject top, PyObject right, PyObject bottom)
        """
        return _render3d.CRender_PushBound(*args)

    def IdentityBound(*args):
        """IdentityBound(self)"""
        return _render3d.CRender_IdentityBound(*args)

    def PopBound(*args):
        """PopBound(self)"""
        return _render3d.CRender_PopBound(*args)

    def IdentityWorld(*args):
        """IdentityWorld(self)"""
        return _render3d.CRender_IdentityWorld(*args)

    def PushMatrix(*args):
        """PushMatrix(self)"""
        return _render3d.CRender_PushMatrix(*args)

    def PopMatrix(*args):
        """PopMatrix(self)"""
        return _render3d.CRender_PopMatrix(*args)

    def Translate(*args):
        """Translate(self, PyObject x, PyObject y)"""
        return _render3d.CRender_Translate(*args)

    def Translate3D(*args):
        """Translate3D(self, PyObject x, PyObject y, PyObject z)"""
        return _render3d.CRender_Translate3D(*args)

    def Identity(*args):
        """Identity(self)"""
        return _render3d.CRender_Identity(*args)

    def Rotate(*args):
        """Rotate(self, PyObject a)"""
        return _render3d.CRender_Rotate(*args)

    def PostRotate3D(*args):
        """PostRotate3D(self, PyObject x, PyObject y, PyObject z, PyObject a)"""
        return _render3d.CRender_PostRotate3D(*args)

    def Rotate3D(*args):
        """Rotate3D(self, PyObject x, PyObject y, PyObject z, PyObject a)"""
        return _render3d.CRender_Rotate3D(*args)

    def Scale(*args):
        """Scale(self, PyObject x, PyObject y)"""
        return _render3d.CRender_Scale(*args)

    def Scale3D(*args):
        """Scale3D(self, PyObject x, PyObject y, PyObject z)"""
        return _render3d.CRender_Scale3D(*args)

    def SetColor(*args):
        """SetColor(self, PyObject a, PyObject r, PyObject g, PyObject b)"""
        return _render3d.CRender_SetColor(*args)

    def ColorMask(*args):
        """ColorMask(self, BOOL a, BOOL r, BOOL g, BOOL b)"""
        return _render3d.CRender_ColorMask(*args)

    def EnableLight(*args):
        """EnableLight(self, DWORD bEnable)"""
        return _render3d.CRender_EnableLight(*args)

    def SetLight(*args):
        """
        SetLight(self, int i, int type, float a, float r, float g, float b, 
            float x, float y, float z, float nx, float ny, 
            float nz, float falloff, float A, float B, 
            float C)
        """
        return _render3d.CRender_SetLight(*args)

    def Clear(*args):
        """Clear(self, PyObject a, PyObject r, PyObject g, PyObject b)"""
        return _render3d.CRender_Clear(*args)

    def ClearZ(*args):
        """ClearZ(self)"""
        return _render3d.CRender_ClearZ(*args)

    def DrawRect(*args):
        """DrawRect(self, PyObject l, PyObject t, PyObject r, PyObject b)"""
        return _render3d.CRender_DrawRect(*args)

    def DrawRectEx(*args):
        """DrawRectEx(self, PyObject l, PyObject t, PyObject r, PyObject b, PyObject z)"""
        return _render3d.CRender_DrawRectEx(*args)

    def DrawMesh(*args):
        """DrawMesh(self, CMesh mesh)"""
        return _render3d.CRender_DrawMesh(*args)

    def DrawRectPie(*args):
        """
        DrawRectPie(self, PyObject l, PyObject t, PyObject r, PyObject b, PyObject s, 
            PyObject e)
        """
        return _render3d.CRender_DrawRectPie(*args)

    def DrawQuad(*args):
        """
        DrawQuad(self, PyObject x0, PyObject y0, PyObject x1, PyObject y1, 
            PyObject x2, PyObject y2, PyObject x3, PyObject y3)
        """
        return _render3d.CRender_DrawQuad(*args)

    def DrawVideo(*args):
        """
        DrawVideo(self, CMovieTexture tex, PyObject l, PyObject t, PyObject r, 
            PyObject b)
        """
        return _render3d.CRender_DrawVideo(*args)

    def DrawVideoWithOrientation(*args):
        """
        DrawVideoWithOrientation(self, CMovieTexture tex, int orientation, PyObject l, PyObject t, 
            PyObject r, PyObject b)
        """
        return _render3d.CRender_DrawVideoWithOrientation(*args)

    def DrawExtLayer(*args):
        """DrawExtLayer(self, PyObject l, PyObject t, PyObject r, PyObject b)"""
        return _render3d.CRender_DrawExtLayer(*args)

    def BeginRenderToTexture(*args):
        """
        BeginRenderToTexture(self, unsigned int w, unsigned int h, float a, float r, float g, 
            float b)
        BeginRenderToTexture(self, PyObject w, PyObject h, PyObject a=None, PyObject r=None, 
            PyObject g=None, PyObject b=None)
        BeginRenderToTexture(self, PyObject w, PyObject h, PyObject a=None, PyObject r=None, 
            PyObject g=None)
        BeginRenderToTexture(self, PyObject w, PyObject h, PyObject a=None, PyObject r=None)
        BeginRenderToTexture(self, PyObject w, PyObject h, PyObject a=None)
        BeginRenderToTexture(self, PyObject w, PyObject h)
        """
        return _render3d.CRender_BeginRenderToTexture(*args)

    def DrawRenderToTexture(*args):
        """
        DrawRenderToTexture(self, float left, float top, float right, float bottom)
        DrawRenderToTexture(self, PyObject left, PyObject top, PyObject right, PyObject bottom)
        """
        return _render3d.CRender_DrawRenderToTexture(*args)

    def Set3DViewport(*args):
        """
        Set3DViewport(self, PyObject x, PyObject y, PyObject w, PyObject h, PyObject fov, 
            PyObject near, PyObject far)
        """
        return _render3d.CRender_Set3DViewport(*args)

    def SetViewport(*args):
        """SetViewport(self, PyObject x, PyObject y, PyObject w, PyObject h)"""
        return _render3d.CRender_SetViewport(*args)

    def PushViewport(*args):
        """PushViewport(self)"""
        return _render3d.CRender_PushViewport(*args)

    def PopViewport(*args):
        """PopViewport(self)"""
        return _render3d.CRender_PopViewport(*args)

    def PushProjMatrix(*args):
        """PushProjMatrix(self)"""
        return _render3d.CRender_PushProjMatrix(*args)

    def PopProjMatrix(*args):
        """PopProjMatrix(self)"""
        return _render3d.CRender_PopProjMatrix(*args)

    def SetProjMatrix(*args):
        """SetProjMatrix(self, PyObject fov, PyObject aspect, PyObject n, PyObject f)"""
        return _render3d.CRender_SetProjMatrix(*args)

    def PushViewMatrix(*args):
        """PushViewMatrix(self)"""
        return _render3d.CRender_PushViewMatrix(*args)

    def PopViewMatrix(*args):
        """PopViewMatrix(self)"""
        return _render3d.CRender_PopViewMatrix(*args)

    def SetViewMatrix(*args):
        """
        SetViewMatrix(self, PyObject xFrom, PyObject yFrom, PyObject zFrom, PyObject xAt, 
            PyObject yAt, PyObject zAt, PyObject xUp, 
            PyObject yUp, PyObject zUp)
        """
        return _render3d.CRender_SetViewMatrix(*args)

    def ViewTranslate(*args):
        """ViewTranslate(self, PyObject x, PyObject y, PyObject z)"""
        return _render3d.CRender_ViewTranslate(*args)

    def PushTransform(*args):
        """PushTransform(self)"""
        return _render3d.CRender_PushTransform(*args)

    def PopTransform(*args):
        """PopTransform(self)"""
        return _render3d.CRender_PopTransform(*args)

    def SetTextureMatrix(*args):
        """SetTextureMatrix(self, PyObject sx, PyObject sy, PyObject tx, PyObject ty)"""
        return _render3d.CRender_SetTextureMatrix(*args)

    def Repeat(*args):
        """Repeat(self, int n)"""
        return _render3d.CRender_Repeat(*args)

    def EndRepeat(*args):
        """EndRepeat(self)"""
        return _render3d.CRender_EndRepeat(*args)

    def Loop(*args):
        """Loop(self, int start, int end, int step)"""
        return _render3d.CRender_Loop(*args)

    def EndLoop(*args):
        """EndLoop(self)"""
        return _render3d.CRender_EndLoop(*args)

    def BeginZSort(*args):
        """BeginZSort(self)"""
        return _render3d.CRender_BeginZSort(*args)

    def EndZSort(*args):
        """
        EndZSort(self, int hint=0)
        EndZSort(self)
        """
        return _render3d.CRender_EndZSort(*args)

    def ZTest(*args):
        """ZTest(self, bool ztest)"""
        return _render3d.CRender_ZTest(*args)

CRender_swigregister = _render3d.CRender_swigregister
CRender_swigregister(CRender)



